var _eeue56$elm_all_dict$EveryDict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_eeue56$elm_all_dict$EveryDict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$keys = function (dict) {
	return A3(
		_eeue56$elm_all_dict$EveryDict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$EveryDict$values = function (dict) {
	return A3(
		_eeue56$elm_all_dict$EveryDict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$EveryDict$toList = function (dict) {
	return A3(
		_eeue56$elm_all_dict$EveryDict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$EveryDict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_eeue56$elm_all_dict$EveryDict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$isBBlack = function (dict) {
	var _p2 = dict;
	_v8_2:
	do {
		if (_p2.ctor === 'RBNode_elm_builtin') {
			if (_p2._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v8_2;
			}
		} else {
			if (_p2._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v8_2;
			}
		}
	} while(false);
	return false;
};
var _eeue56$elm_all_dict$EveryDict$showFlag = function (f) {
	var _p3 = f;
	switch (_p3.ctor) {
		case 'Insert':
			return 'Insert';
		case 'Remove':
			return 'Remove';
		default:
			return 'Same';
	}
};
var _eeue56$elm_all_dict$EveryDict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p4 = dict;
			if (_p4.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v11 = A2(_eeue56$elm_all_dict$EveryDict$sizeHelp, n + 1, _p4._4),
					_v12 = _p4._3;
				n = _v11;
				dict = _v12;
				continue sizeHelp;
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$size = function (dict) {
	return A2(_eeue56$elm_all_dict$EveryDict$sizeHelp, 0, dict);
};
var _eeue56$elm_all_dict$EveryDict$isEmpty = function (dict) {
	var _p5 = dict;
	if (_p5.ctor === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var _eeue56$elm_all_dict$EveryDict$max = function (dict) {
	max:
	while (true) {
		var _p6 = dict;
		if (_p6.ctor === 'RBNode_elm_builtin') {
			if (_p6._4.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: _p6._1, _1: _p6._2};
			} else {
				var _v15 = _p6._4;
				dict = _v15;
				continue max;
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 127, column: 5},
					end: {line: 135, column: 51}
				},
				_p6)('(max Empty) is not defined');
		}
	}
};
var _eeue56$elm_all_dict$EveryDict$min = function (dict) {
	min:
	while (true) {
		var _p8 = dict;
		if (_p8.ctor === 'RBNode_elm_builtin') {
			if ((_p8._3.ctor === 'RBEmpty_elm_builtin') && (_p8._3._0.ctor === 'LBlack')) {
				return {ctor: '_Tuple2', _0: _p8._1, _1: _p8._2};
			} else {
				var _v17 = _p8._3;
				dict = _v17;
				continue min;
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 115, column: 5},
					end: {line: 123, column: 51}
				},
				_p8)('(min Empty) is not defined');
		}
	}
};
var _eeue56$elm_all_dict$EveryDict$eq = F2(
	function (first, second) {
		return _elm_lang$core$Native_Utils.eq(
			_eeue56$elm_all_dict$EveryDict$toList(first),
			_eeue56$elm_all_dict$EveryDict$toList(second));
	});
var _eeue56$elm_all_dict$EveryDict$ord = _elm_lang$core$Basics$toString;
var _eeue56$elm_all_dict$EveryDict$get_ = F2(
	function (targetKey, dict) {
		get_:
		while (true) {
			var _p10 = dict;
			if (_p10.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p11 = A2(
					_elm_lang$core$Basics$compare,
					_eeue56$elm_all_dict$EveryDict$ord(targetKey),
					_eeue56$elm_all_dict$EveryDict$ord(_p10._1));
				switch (_p11.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p10._3;
						targetKey = _v20;
						dict = _v21;
						continue get_;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p10._2);
					default:
						var _v22 = targetKey,
							_v23 = _p10._4;
						targetKey = _v22;
						dict = _v23;
						continue get_;
				}
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$get = F2(
	function (targetKey, dict) {
		return A2(_eeue56$elm_all_dict$EveryDict$get_, targetKey, dict);
	});
var _eeue56$elm_all_dict$EveryDict$member = F2(
	function (key, dict) {
		var _p12 = A2(_eeue56$elm_all_dict$EveryDict$get_, key, dict);
		if (_p12.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _eeue56$elm_all_dict$EveryDict$showLColor = function (color) {
	var _p13 = color;
	if (_p13.ctor === 'LBlack') {
		return 'LBlack';
	} else {
		return 'LBBlack';
	}
};
var _eeue56$elm_all_dict$EveryDict$showNColor = function (c) {
	var _p14 = c;
	switch (_p14.ctor) {
		case 'Red':
			return 'Red';
		case 'Black':
			return 'Black';
		case 'BBlack':
			return 'BBlack';
		default:
			return 'NBlack';
	}
};
var _eeue56$elm_all_dict$EveryDict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Utils.crash(
			'EveryDict',
			{
				start: {line: 320, column: 3},
				end: {line: 320, column: 14}
			})(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _eeue56$elm_all_dict$EveryDict$showNColor(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/Elm/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _eeue56$elm_all_dict$EveryDict$NBlack = {ctor: 'NBlack'};
var _eeue56$elm_all_dict$EveryDict$BBlack = {ctor: 'BBlack'};
var _eeue56$elm_all_dict$EveryDict$Black = {ctor: 'Black'};
var _eeue56$elm_all_dict$EveryDict$blackish = function (t) {
	var _p15 = t;
	if (_p15.ctor === 'RBNode_elm_builtin') {
		var _p16 = _p15._0;
		return _elm_lang$core$Native_Utils.eq(_p16, _eeue56$elm_all_dict$EveryDict$Black) || _elm_lang$core$Native_Utils.eq(_p16, _eeue56$elm_all_dict$EveryDict$BBlack);
	} else {
		return true;
	}
};
var _eeue56$elm_all_dict$EveryDict$Red = {ctor: 'Red'};
var _eeue56$elm_all_dict$EveryDict$moreBlack = function (color) {
	var _p17 = color;
	switch (_p17.ctor) {
		case 'Black':
			return _eeue56$elm_all_dict$EveryDict$BBlack;
		case 'Red':
			return _eeue56$elm_all_dict$EveryDict$Black;
		case 'NBlack':
			return _eeue56$elm_all_dict$EveryDict$Red;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 294, column: 5},
					end: {line: 298, column: 73}
				},
				_p17)('Can\'t make a double black node more black!');
	}
};
var _eeue56$elm_all_dict$EveryDict$lessBlack = function (color) {
	var _p19 = color;
	switch (_p19.ctor) {
		case 'BBlack':
			return _eeue56$elm_all_dict$EveryDict$Black;
		case 'Black':
			return _eeue56$elm_all_dict$EveryDict$Red;
		case 'Red':
			return _eeue56$elm_all_dict$EveryDict$NBlack;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 303, column: 5},
					end: {line: 307, column: 75}
				},
				_p19)('Can\'t make a negative black node less black!');
	}
};
var _eeue56$elm_all_dict$EveryDict$LBBlack = {ctor: 'LBBlack'};
var _eeue56$elm_all_dict$EveryDict$LBlack = {ctor: 'LBlack'};
var _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _eeue56$elm_all_dict$EveryDict$empty = _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
var _eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _eeue56$elm_all_dict$EveryDict$ensureBlackRoot = function (dict) {
	var _p21 = dict;
	if (_p21.ctor === 'RBNode_elm_builtin') {
		switch (_p21._0.ctor) {
			case 'Red':
				return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p21._1, _p21._2, _p21._3, _p21._4);
			case 'Black':
				return dict;
			default:
				return dict;
		}
	} else {
		return dict;
	}
};
var _eeue56$elm_all_dict$EveryDict$lessBlackTree = function (dict) {
	var _p22 = dict;
	if (_p22.ctor === 'RBNode_elm_builtin') {
		return A5(
			_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
			_eeue56$elm_all_dict$EveryDict$lessBlack(_p22._0),
			_p22._1,
			_p22._2,
			_p22._3,
			_p22._4);
	} else {
		if (_p22._0.ctor === 'LBBlack') {
			return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
		} else {
			return dict;
		}
	}
};
var _eeue56$elm_all_dict$EveryDict$blacken = function (t) {
	var _p23 = t;
	if (_p23.ctor === 'RBEmpty_elm_builtin') {
		return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
	} else {
		return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	}
};
var _eeue56$elm_all_dict$EveryDict$redden = function (t) {
	var _p24 = t;
	if (_p24.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Utils.crashCase(
			'EveryDict',
			{
				start: {line: 440, column: 5},
				end: {line: 442, column: 69}
			},
			_p24)('can\'t make a Leaf red');
	} else {
		return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Red, _p24._1, _p24._2, _p24._3, _p24._4);
	}
};
var _eeue56$elm_all_dict$EveryDict$balance_node = function (t) {
	var assemble = function (col) {
		return function (xk) {
			return function (xv) {
				return function (yk) {
					return function (yv) {
						return function (zk) {
							return function (zv) {
								return function (a) {
									return function (b) {
										return function (c) {
											return function (d) {
												return A5(
													_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
													_eeue56$elm_all_dict$EveryDict$lessBlack(col),
													yk,
													yv,
													A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, xk, xv, a, b),
													A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, zk, zv, c, d));
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
	if (_eeue56$elm_all_dict$EveryDict$blackish(t)) {
		var _p26 = t;
		_v34_6:
		do {
			_v34_5:
			do {
				_v34_4:
				do {
					_v34_3:
					do {
						_v34_2:
						do {
							_v34_1:
							do {
								_v34_0:
								do {
									if (_p26.ctor === 'RBNode_elm_builtin') {
										if (_p26._3.ctor === 'RBNode_elm_builtin') {
											if (_p26._4.ctor === 'RBNode_elm_builtin') {
												switch (_p26._3._0.ctor) {
													case 'Red':
														switch (_p26._4._0.ctor) {
															case 'Red':
																if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
																	break _v34_0;
																} else {
																	if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																		break _v34_1;
																	} else {
																		if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
																			break _v34_2;
																		} else {
																			if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																				break _v34_3;
																			} else {
																				break _v34_6;
																			}
																		}
																	}
																}
															case 'NBlack':
																if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
																	break _v34_0;
																} else {
																	if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																		break _v34_1;
																	} else {
																		if (((_p26._0.ctor === 'BBlack') && (_p26._4._3.ctor === 'RBNode_elm_builtin')) && (_p26._4._3._0.ctor === 'Black')) {
																			break _v34_4;
																		} else {
																			break _v34_6;
																		}
																	}
																}
															default:
																if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
																	break _v34_0;
																} else {
																	if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																		break _v34_1;
																	} else {
																		break _v34_6;
																	}
																}
														}
													case 'NBlack':
														switch (_p26._4._0.ctor) {
															case 'Red':
																if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
																	break _v34_2;
																} else {
																	if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																		break _v34_3;
																	} else {
																		if (((_p26._0.ctor === 'BBlack') && (_p26._3._4.ctor === 'RBNode_elm_builtin')) && (_p26._3._4._0.ctor === 'Black')) {
																			break _v34_5;
																		} else {
																			break _v34_6;
																		}
																	}
																}
															case 'NBlack':
																if (_p26._0.ctor === 'BBlack') {
																	if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Black')) {
																		break _v34_4;
																	} else {
																		if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Black')) {
																			break _v34_5;
																		} else {
																			break _v34_6;
																		}
																	}
																} else {
																	break _v34_6;
																}
															default:
																if (((_p26._0.ctor === 'BBlack') && (_p26._3._4.ctor === 'RBNode_elm_builtin')) && (_p26._3._4._0.ctor === 'Black')) {
																	break _v34_5;
																} else {
																	break _v34_6;
																}
														}
													default:
														switch (_p26._4._0.ctor) {
															case 'Red':
																if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
																	break _v34_2;
																} else {
																	if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																		break _v34_3;
																	} else {
																		break _v34_6;
																	}
																}
															case 'NBlack':
																if (((_p26._0.ctor === 'BBlack') && (_p26._4._3.ctor === 'RBNode_elm_builtin')) && (_p26._4._3._0.ctor === 'Black')) {
																	break _v34_4;
																} else {
																	break _v34_6;
																}
															default:
																break _v34_6;
														}
												}
											} else {
												switch (_p26._3._0.ctor) {
													case 'Red':
														if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
															break _v34_0;
														} else {
															if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																break _v34_1;
															} else {
																break _v34_6;
															}
														}
													case 'NBlack':
														if (((_p26._0.ctor === 'BBlack') && (_p26._3._4.ctor === 'RBNode_elm_builtin')) && (_p26._3._4._0.ctor === 'Black')) {
															break _v34_5;
														} else {
															break _v34_6;
														}
													default:
														break _v34_6;
												}
											}
										} else {
											if (_p26._4.ctor === 'RBNode_elm_builtin') {
												switch (_p26._4._0.ctor) {
													case 'Red':
														if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
															break _v34_2;
														} else {
															if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																break _v34_3;
															} else {
																break _v34_6;
															}
														}
													case 'NBlack':
														if (((_p26._0.ctor === 'BBlack') && (_p26._4._3.ctor === 'RBNode_elm_builtin')) && (_p26._4._3._0.ctor === 'Black')) {
															break _v34_4;
														} else {
															break _v34_6;
														}
													default:
														break _v34_6;
												}
											} else {
												break _v34_6;
											}
										}
									} else {
										break _v34_6;
									}
								} while(false);
								return assemble(_p26._0)(_p26._3._3._1)(_p26._3._3._2)(_p26._3._1)(_p26._3._2)(_p26._1)(_p26._2)(_p26._3._3._3)(_p26._3._3._4)(_p26._3._4)(_p26._4);
							} while(false);
							return assemble(_p26._0)(_p26._3._1)(_p26._3._2)(_p26._3._4._1)(_p26._3._4._2)(_p26._1)(_p26._2)(_p26._3._3)(_p26._3._4._3)(_p26._3._4._4)(_p26._4);
						} while(false);
						return assemble(_p26._0)(_p26._1)(_p26._2)(_p26._4._3._1)(_p26._4._3._2)(_p26._4._1)(_p26._4._2)(_p26._3)(_p26._4._3._3)(_p26._4._3._4)(_p26._4._4);
					} while(false);
					return assemble(_p26._0)(_p26._1)(_p26._2)(_p26._4._1)(_p26._4._2)(_p26._4._4._1)(_p26._4._4._2)(_p26._3)(_p26._4._3)(_p26._4._4._3)(_p26._4._4._4);
				} while(false);
				var _p28 = _p26._4._4;
				var _p27 = _p28;
				if ((_p27.ctor === 'RBNode_elm_builtin') && (_p27._0.ctor === 'Black')) {
					return A5(
						_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
						_eeue56$elm_all_dict$EveryDict$Black,
						_p26._4._3._1,
						_p26._4._3._2,
						A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p26._1, _p26._2, _p26._3, _p26._4._3._3),
						A5(
							_eeue56$elm_all_dict$EveryDict$balance,
							_eeue56$elm_all_dict$EveryDict$Black,
							_p26._4._1,
							_p26._4._2,
							_p26._4._3._4,
							_eeue56$elm_all_dict$EveryDict$redden(_p28)));
				} else {
					return t;
				}
			} while(false);
			var _p30 = _p26._3._3;
			var _p29 = _p30;
			if ((_p29.ctor === 'RBNode_elm_builtin') && (_p29._0.ctor === 'Black')) {
				return A5(
					_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
					_eeue56$elm_all_dict$EveryDict$Black,
					_p26._3._4._1,
					_p26._3._4._2,
					A5(
						_eeue56$elm_all_dict$EveryDict$balance,
						_eeue56$elm_all_dict$EveryDict$Black,
						_p26._3._1,
						_p26._3._2,
						_eeue56$elm_all_dict$EveryDict$redden(_p30),
						_p26._3._4._3),
					A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p26._1, _p26._2, _p26._3._4._4, _p26._4));
			} else {
				return t;
			}
		} while(false);
		return t;
	} else {
		return t;
	}
};
var _eeue56$elm_all_dict$EveryDict$balance = F5(
	function (c, k, v, l, r) {
		return _eeue56$elm_all_dict$EveryDict$balance_node(
			A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, c, k, v, l, r));
	});
var _eeue56$elm_all_dict$EveryDict$bubble = F5(
	function (c, k, v, l, r) {
		return (_eeue56$elm_all_dict$EveryDict$isBBlack(l) || _eeue56$elm_all_dict$EveryDict$isBBlack(r)) ? A5(
			_eeue56$elm_all_dict$EveryDict$balance,
			_eeue56$elm_all_dict$EveryDict$moreBlack(c),
			k,
			v,
			_eeue56$elm_all_dict$EveryDict$lessBlackTree(l),
			_eeue56$elm_all_dict$EveryDict$lessBlackTree(r)) : A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _eeue56$elm_all_dict$EveryDict$remove_max = F5(
	function (c, k, v, l, r) {
		var _p31 = r;
		if (_p31.ctor === 'RBEmpty_elm_builtin') {
			return A3(_eeue56$elm_all_dict$EveryDict$rem, c, l, r);
		} else {
			return A5(
				_eeue56$elm_all_dict$EveryDict$bubble,
				c,
				k,
				v,
				l,
				A5(_eeue56$elm_all_dict$EveryDict$remove_max, _p31._0, _p31._1, _p31._2, _p31._3, _p31._4));
		}
	});
var _eeue56$elm_all_dict$EveryDict$rem = F3(
	function (c, l, r) {
		var _p32 = {ctor: '_Tuple2', _0: l, _1: r};
		if (_p32._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p32._1.ctor === 'RBEmpty_elm_builtin') {
				var _p33 = c;
				switch (_p33.ctor) {
					case 'Red':
						return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
					case 'Black':
						return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBBlack);
					default:
						return _eeue56$elm_all_dict$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p36 = _p32._1._0;
				var _p35 = _p32._0._0;
				var _p34 = {ctor: '_Tuple3', _0: c, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'LBlack')) && (_p34._2.ctor === 'Red')) {
					return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p32._1._1, _p32._1._2, _p32._1._3, _p32._1._4);
				} else {
					return A4(
						_eeue56$elm_all_dict$EveryDict$reportRemBug,
						'Black/LBlack/Red',
						c,
						_eeue56$elm_all_dict$EveryDict$showLColor(_p35),
						_eeue56$elm_all_dict$EveryDict$showNColor(_p36));
				}
			}
		} else {
			if (_p32._1.ctor === 'RBEmpty_elm_builtin') {
				var _p39 = _p32._1._0;
				var _p38 = _p32._0._0;
				var _p37 = {ctor: '_Tuple3', _0: c, _1: _p38, _2: _p39};
				if ((((_p37.ctor === '_Tuple3') && (_p37._0.ctor === 'Black')) && (_p37._1.ctor === 'Red')) && (_p37._2.ctor === 'LBlack')) {
					return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p32._0._1, _p32._0._2, _p32._0._3, _p32._0._4);
				} else {
					return A4(
						_eeue56$elm_all_dict$EveryDict$reportRemBug,
						'Black/Red/LBlack',
						c,
						_eeue56$elm_all_dict$EveryDict$showNColor(_p38),
						_eeue56$elm_all_dict$EveryDict$showLColor(_p39));
				}
			} else {
				var _p45 = _p32._0._2;
				var _p44 = _p32._0._4;
				var _p43 = _p32._0._3;
				var _p42 = _p32._0._1;
				var _p41 = _p32._0._0;
				var l_ = A5(_eeue56$elm_all_dict$EveryDict$remove_max, _p41, _p42, _p45, _p43, _p44);
				var r = A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p32._1._0, _p32._1._1, _p32._1._2, _p32._1._3, _p32._1._4);
				var l = A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p41, _p42, _p45, _p43, _p44);
				var _p40 = _eeue56$elm_all_dict$EveryDict$max(l);
				var k = _p40._0;
				var v = _p40._1;
				return A5(_eeue56$elm_all_dict$EveryDict$bubble, c, k, v, l_, r);
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$map = F2(
	function (f, dict) {
		var _p46 = dict;
		if (_p46.ctor === 'RBEmpty_elm_builtin') {
			return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_p46._0);
		} else {
			var _p47 = _p46._1;
			return A5(
				_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
				_p46._0,
				_p47,
				A2(f, _p47, _p46._2),
				A2(_eeue56$elm_all_dict$EveryDict$map, f, _p46._3),
				A2(_eeue56$elm_all_dict$EveryDict$map, f, _p46._4));
		}
	});
var _eeue56$elm_all_dict$EveryDict$Same = {ctor: 'Same'};
var _eeue56$elm_all_dict$EveryDict$Remove = {ctor: 'Remove'};
var _eeue56$elm_all_dict$EveryDict$Insert = {ctor: 'Insert'};
var _eeue56$elm_all_dict$EveryDict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p48 = dict;
			if (_p48.ctor === 'RBEmpty_elm_builtin') {
				var _p49 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p49.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _eeue56$elm_all_dict$EveryDict$Same, _1: _eeue56$elm_all_dict$EveryDict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _eeue56$elm_all_dict$EveryDict$Insert,
						_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Red, k, _p49._0, _eeue56$elm_all_dict$EveryDict$empty, _eeue56$elm_all_dict$EveryDict$empty)
					};
				}
			} else {
				var _p60 = _p48._2;
				var _p59 = _p48._4;
				var _p58 = _p48._3;
				var _p57 = _p48._1;
				var _p56 = _p48._0;
				var _p50 = A2(
					_elm_lang$core$Basics$compare,
					_eeue56$elm_all_dict$EveryDict$ord(k),
					_eeue56$elm_all_dict$EveryDict$ord(_p57));
				switch (_p50.ctor) {
					case 'EQ':
						var _p51 = alter(
							_elm_lang$core$Maybe$Just(_p60));
						if (_p51.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _eeue56$elm_all_dict$EveryDict$Remove,
								_1: A3(_eeue56$elm_all_dict$EveryDict$rem, _p56, _p58, _p59)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _eeue56$elm_all_dict$EveryDict$Same,
								_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p56, _p57, _p51._0, _p58, _p59)
							};
						}
					case 'LT':
						var _p52 = up(_p58);
						var flag = _p52._0;
						var newLeft = _p52._1;
						var _p53 = flag;
						switch (_p53.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Same,
									_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p56, _p57, _p60, newLeft, _p59)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Insert,
									_1: A5(_eeue56$elm_all_dict$EveryDict$balance, _p56, _p57, _p60, newLeft, _p59)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Remove,
									_1: A5(_eeue56$elm_all_dict$EveryDict$bubble, _p56, _p57, _p60, newLeft, _p59)
								};
						}
					default:
						var _p54 = up(_p59);
						var flag = _p54._0;
						var newRight = _p54._1;
						var _p55 = flag;
						switch (_p55.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Same,
									_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p56, _p57, _p60, _p58, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Insert,
									_1: A5(_eeue56$elm_all_dict$EveryDict$balance, _p56, _p57, _p60, _p58, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Remove,
									_1: A5(_eeue56$elm_all_dict$EveryDict$bubble, _p56, _p57, _p60, _p58, newRight)
								};
						}
				}
			}
		};
		var _p61 = up(dict);
		var flag = _p61._0;
		var updatedDict = _p61._1;
		var _p62 = flag;
		switch (_p62.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _eeue56$elm_all_dict$EveryDict$ensureBlackRoot(updatedDict);
			default:
				return _eeue56$elm_all_dict$EveryDict$blacken(updatedDict);
		}
	});
var _eeue56$elm_all_dict$EveryDict$insert = F3(
	function (key, value, dict) {
		return A3(
			_eeue56$elm_all_dict$EveryDict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _eeue56$elm_all_dict$EveryDict$singleton = F2(
	function (key, value) {
		return A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, _eeue56$elm_all_dict$EveryDict$empty);
	});
var _eeue56$elm_all_dict$EveryDict$union = F2(
	function (t1, t2) {
		return A3(_eeue56$elm_all_dict$EveryDict$foldl, _eeue56$elm_all_dict$EveryDict$insert, t2, t1);
	});
var _eeue56$elm_all_dict$EveryDict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_eeue56$elm_all_dict$EveryDict$insert, _p64._0, _p64._1, dict);
			}),
		_eeue56$elm_all_dict$EveryDict$empty,
		assocs);
};
var _eeue56$elm_all_dict$EveryDict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, dict) : dict;
			});
		return A3(_eeue56$elm_all_dict$EveryDict$foldl, add, _eeue56$elm_all_dict$EveryDict$empty, dictionary);
	});
var _eeue56$elm_all_dict$EveryDict$intersect = F2(
	function (t1, t2) {
		return A2(
			_eeue56$elm_all_dict$EveryDict$filter,
			F2(
				function (k, _p65) {
					return A2(_eeue56$elm_all_dict$EveryDict$member, k, t2);
				}),
			t1);
	});
var _eeue56$elm_all_dict$EveryDict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p66) {
				var _p67 = _p66;
				var _p69 = _p67._1;
				var _p68 = _p67._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, _p68),
					_1: _p69
				} : {
					ctor: '_Tuple2',
					_0: _p68,
					_1: A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, _p69)
				};
			});
		return A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			add,
			{ctor: '_Tuple2', _0: _eeue56$elm_all_dict$EveryDict$empty, _1: _eeue56$elm_all_dict$EveryDict$empty},
			dict);
	});
var _eeue56$elm_all_dict$EveryDict$remove = F2(
	function (key, dict) {
		return A3(
			_eeue56$elm_all_dict$EveryDict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _eeue56$elm_all_dict$EveryDict$diff = F2(
	function (t1, t2) {
		return A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			F3(
				function (k, v, t) {
					return A2(_eeue56$elm_all_dict$EveryDict$remove, k, t);
				}),
			t1,
			t2);
	});
