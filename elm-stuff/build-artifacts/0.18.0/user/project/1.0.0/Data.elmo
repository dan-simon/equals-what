var _user$project$Data$allQuestions = {
	ctor: '::',
	_0: {
		ctor: '::',
		_0: false,
		_1: {
			ctor: '::',
			_0: false,
			_1: {
				ctor: '::',
				_0: false,
				_1: {
					ctor: '::',
					_0: false,
					_1: {ctor: '[]'}
				}
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '::',
			_0: false,
			_1: {
				ctor: '::',
				_0: false,
				_1: {
					ctor: '::',
					_0: false,
					_1: {
						ctor: '::',
						_0: true,
						_1: {ctor: '[]'}
					}
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: false,
				_1: {
					ctor: '::',
					_0: false,
					_1: {
						ctor: '::',
						_0: true,
						_1: {
							ctor: '::',
							_0: false,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: false,
					_1: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: true,
							_1: {
								ctor: '::',
								_0: true,
								_1: {ctor: '[]'}
							}
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: true,
							_1: {
								ctor: '::',
								_0: false,
								_1: {
									ctor: '::',
									_0: false,
									_1: {ctor: '[]'}
								}
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: false,
							_1: {
								ctor: '::',
								_0: true,
								_1: {
									ctor: '::',
									_0: false,
									_1: {
										ctor: '::',
										_0: true,
										_1: {ctor: '[]'}
									}
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '::',
								_0: false,
								_1: {
									ctor: '::',
									_0: true,
									_1: {
										ctor: '::',
										_0: true,
										_1: {
											ctor: '::',
											_0: false,
											_1: {ctor: '[]'}
										}
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '::',
									_0: false,
									_1: {
										ctor: '::',
										_0: true,
										_1: {
											ctor: '::',
											_0: true,
											_1: {
												ctor: '::',
												_0: true,
												_1: {ctor: '[]'}
											}
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '::',
										_0: true,
										_1: {
											ctor: '::',
											_0: false,
											_1: {
												ctor: '::',
												_0: false,
												_1: {
													ctor: '::',
													_0: false,
													_1: {ctor: '[]'}
												}
											}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '::',
											_0: true,
											_1: {
												ctor: '::',
												_0: false,
												_1: {
													ctor: '::',
													_0: false,
													_1: {
														ctor: '::',
														_0: true,
														_1: {ctor: '[]'}
													}
												}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '::',
												_0: true,
												_1: {
													ctor: '::',
													_0: false,
													_1: {
														ctor: '::',
														_0: true,
														_1: {
															ctor: '::',
															_0: false,
															_1: {ctor: '[]'}
														}
													}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '::',
													_0: true,
													_1: {
														ctor: '::',
														_0: false,
														_1: {
															ctor: '::',
															_0: true,
															_1: {
																ctor: '::',
																_0: true,
																_1: {ctor: '[]'}
															}
														}
													}
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '::',
														_0: true,
														_1: {
															ctor: '::',
															_0: true,
															_1: {
																ctor: '::',
																_0: false,
																_1: {
																	ctor: '::',
																	_0: false,
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '::',
															_0: true,
															_1: {
																ctor: '::',
																_0: true,
																_1: {
																	ctor: '::',
																	_0: false,
																	_1: {
																		ctor: '::',
																		_0: true,
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '::',
																_0: true,
																_1: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: true,
																		_1: {
																			ctor: '::',
																			_0: false,
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: true,
																		_1: {
																			ctor: '::',
																			_0: true,
																			_1: {
																				ctor: '::',
																				_0: true,
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$Data$correctAnswers = _eeue56$elm_all_dict$EveryDict$fromList(
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: {
				ctor: '::',
				_0: false,
				_1: {
					ctor: '::',
					_0: false,
					_1: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: false,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			_1: '500500'
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: false,
					_1: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: false,
							_1: {
								ctor: '::',
								_0: true,
								_1: {ctor: '[]'}
							}
						}
					}
				},
				_1: '6202775059909876223715768192000'
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: false,
							_1: {
								ctor: '::',
								_0: true,
								_1: {
									ctor: '::',
									_0: false,
									_1: {ctor: '[]'}
								}
							}
						}
					},
					_1: '275323961'
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '::',
							_0: false,
							_1: {
								ctor: '::',
								_0: false,
								_1: {
									ctor: '::',
									_0: true,
									_1: {
										ctor: '::',
										_0: true,
										_1: {ctor: '[]'}
									}
								}
							}
						},
						_1: '21257280'
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: false,
								_1: {
									ctor: '::',
									_0: true,
									_1: {
										ctor: '::',
										_0: false,
										_1: {
											ctor: '::',
											_0: false,
											_1: {ctor: '[]'}
										}
									}
								}
							},
							_1: '1592'
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: {
									ctor: '::',
									_0: false,
									_1: {
										ctor: '::',
										_0: true,
										_1: {
											ctor: '::',
											_0: false,
											_1: {
												ctor: '::',
												_0: true,
												_1: {ctor: '[]'}
											}
										}
									}
								},
								_1: '3'
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: false,
										_1: {
											ctor: '::',
											_0: true,
											_1: {
												ctor: '::',
												_0: true,
												_1: {
													ctor: '::',
													_0: false,
													_1: {ctor: '[]'}
												}
											}
										}
									},
									_1: '265'
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: {
											ctor: '::',
											_0: false,
											_1: {
												ctor: '::',
												_0: true,
												_1: {
													ctor: '::',
													_0: true,
													_1: {
														ctor: '::',
														_0: true,
														_1: {ctor: '[]'}
													}
												}
											}
										},
										_1: '16'
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: {
												ctor: '::',
												_0: true,
												_1: {
													ctor: '::',
													_0: false,
													_1: {
														ctor: '::',
														_0: false,
														_1: {
															ctor: '::',
															_0: false,
															_1: {ctor: '[]'}
														}
													}
												}
											},
											_1: '14'
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: {
													ctor: '::',
													_0: true,
													_1: {
														ctor: '::',
														_0: false,
														_1: {
															ctor: '::',
															_0: false,
															_1: {
																ctor: '::',
																_0: true,
																_1: {ctor: '[]'}
															}
														}
													}
												},
												_1: '21'
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: {
														ctor: '::',
														_0: true,
														_1: {
															ctor: '::',
															_0: false,
															_1: {
																ctor: '::',
																_0: true,
																_1: {
																	ctor: '::',
																	_0: false,
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													_1: '100'
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: {
															ctor: '::',
															_0: true,
															_1: {
																ctor: '::',
																_0: false,
																_1: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: true,
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														_1: '87'
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: {
																ctor: '::',
																_0: true,
																_1: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: false,
																		_1: {
																			ctor: '::',
																			_0: false,
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															_1: '123'
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: true,
																		_1: {
																			ctor: '::',
																			_0: false,
																			_1: {
																				ctor: '::',
																				_0: true,
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																},
																_1: '6562676'
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: {
																		ctor: '::',
																		_0: true,
																		_1: {
																			ctor: '::',
																			_0: true,
																			_1: {
																				ctor: '::',
																				_0: true,
																				_1: {
																					ctor: '::',
																					_0: false,
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	_1: '141886'
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: {
																			ctor: '::',
																			_0: true,
																			_1: {
																				ctor: '::',
																				_0: true,
																				_1: {
																					ctor: '::',
																					_0: true,
																					_1: {
																						ctor: '::',
																						_0: true,
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		_1: '50005000'
																	},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Data$questionText = _eeue56$elm_all_dict$EveryDict$fromList(
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: {
				ctor: '::',
				_0: false,
				_1: {
					ctor: '::',
					_0: false,
					_1: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: false,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			_1: '1 + 2 + ... + 1000 = ?'
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: false,
					_1: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: false,
							_1: {
								ctor: '::',
								_0: true,
								_1: {ctor: '[]'}
							}
						}
					}
				},
				_1: 'Let us define the sum, product, minimum, and maximum of multidimensional arrays not as applying to all the numbers in the array and returning a number, but as applying to each 1D array in the array and replacing it by the appropriate number.\nSo, for example, the sum of the 2D array [[1, 2], [3, 4]] is not 10 (the sum of all the numbers in the array), but rather [3, 7] (the array of sums of the 1D items).\nSimilarly, the product of [[[1, 2], [3, 4]], [[5, 6], [7, 8]]] is [[2, 6], [12, 56]].\nNotice that taking the sum, product, minimum, or maximum of an array reduces its dimension by 1.\nAs a consequence, taking the sum, product, minimum, or maximum of an n-dimensional array n times will give a zero-dimensional result, that is, just a number.\n\nx is a (zero-indexed) 10x10x10x10 array (and thus is 4D)\nx[i][j][k][l] = 1000 * i + 100 * j + 10 * k + l\nthe minimum of the minimum of the minimum of the minimum of x = 0\nthe maximum of the maximum of the maximum of the maximum of x = 9999\nthe minimum of the maximum of the sum of the product of x = ?'
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: false,
							_1: {
								ctor: '::',
								_0: true,
								_1: {
									ctor: '::',
									_0: false,
									_1: {ctor: '[]'}
								}
							}
						}
					},
					_1: 'first (positive) number that is 1 mod 5, 0 mod 11, 20 mod 29, 35 mod 43, 48 mod 59, and 130 mod 137 = ?'
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '::',
							_0: false,
							_1: {
								ctor: '::',
								_0: false,
								_1: {
									ctor: '::',
									_0: true,
									_1: {
										ctor: '::',
										_0: true,
										_1: {ctor: '[]'}
									}
								}
							}
						},
						_1: 'The perimeter of a 1x2 rectangle = 6\nThe surface area of a 1x2x3 solid = 22\nThe hyper-surface area of a 1x2x3x4 hyper-solid = 100\nThe hyper-surface area of a 1x2x3x4x5x6x7x8x9x10 hyper-solid = ?'
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: false,
								_1: {
									ctor: '::',
									_0: true,
									_1: {
										ctor: '::',
										_0: false,
										_1: {
											ctor: '::',
											_0: false,
											_1: {ctor: '[]'}
										}
									}
								}
							},
							_1: 'f(x) = sum of bitwise and, bitwise xor, and bitwise or of all numbers in x\nf([7, 13, 15]) = 4 + 1 + 15 = 20\nf([674, 44, 278, 599, 351, 551, 456, 524, 648, 865, 273, 383, 696, 756, 615, 384, 189, 221, 201, 463]) = ?'
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: {
									ctor: '::',
									_0: false,
									_1: {
										ctor: '::',
										_0: true,
										_1: {
											ctor: '::',
											_0: false,
											_1: {
												ctor: '::',
												_0: true,
												_1: {ctor: '[]'}
											}
										}
									}
								},
								_1: '1 <-> 2: 9\n1 <-> 4: 9\n1 <-> 7: 8\n1 <-> 9: 1\n1 <-> 11: 6\n1 <-> 12: 6\n1 <-> 13: 9\n1 <-> 14: 5\n1 <-> 22: 2\n1 <-> 25: 7\n1 <-> 28: 3\n2 <-> 4: 7\n2 <-> 6: 3\n2 <-> 11: 5\n2 <-> 12: 6\n2 <-> 13: 3\n2 <-> 14: 1\n2 <-> 16: 6\n2 <-> 17: 10\n2 <-> 23: 7\n2 <-> 27: 7\n2 <-> 28: 5\n3 <-> 4: 8\n3 <-> 6: 4\n3 <-> 9: 8\n3 <-> 13: 1\n3 <-> 15: 7\n3 <-> 20: 5\n3 <-> 21: 2\n3 <-> 23: 6\n3 <-> 28: 1\n4 <-> 9: 2\n4 <-> 10: 1\n4 <-> 14: 7\n4 <-> 19: 7\n4 <-> 25: 1\n4 <-> 27: 5\n4 <-> 28: 4\n4 <-> 29: 4\n5 <-> 6: 9\n5 <-> 11: 10\n5 <-> 13: 1\n5 <-> 14: 8\n5 <-> 16: 5\n5 <-> 23: 8\n6 <-> 12: 6\n6 <-> 15: 10\n6 <-> 17: 3\n6 <-> 21: 10\n6 <-> 23: 6\n6 <-> 26: 3\n6 <-> 30: 3\n7 <-> 11: 7\n7 <-> 13: 2\n7 <-> 16: 6\n7 <-> 22: 5\n7 <-> 28: 6\n8 <-> 15: 2\n8 <-> 25: 7\n9 <-> 13: 3\n9 <-> 17: 3\n9 <-> 18: 2\n9 <-> 19: 10\n9 <-> 20: 7\n9 <-> 21: 9\n9 <-> 23: 7\n9 <-> 25: 9\n9 <-> 26: 5\n9 <-> 28: 1\n9 <-> 29: 4\n10 <-> 12: 2\n10 <-> 14: 6\n10 <-> 15: 4\n10 <-> 26: 6\n10 <-> 30: 8\n11 <-> 12: 7\n11 <-> 21: 7\n11 <-> 29: 3\n12 <-> 15: 6\n12 <-> 17: 6\n12 <-> 18: 10\n12 <-> 24: 10\n13 <-> 15: 4\n13 <-> 19: 6\n13 <-> 28: 5\n14 <-> 17: 3\n14 <-> 18: 3\n14 <-> 23: 8\n14 <-> 25: 3\n14 <-> 27: 10\n14 <-> 30: 5\n15 <-> 25: 3\n15 <-> 26: 2\n15 <-> 27: 4\n15 <-> 30: 6\n16 <-> 17: 3\n16 <-> 18: 7\n16 <-> 21: 3\n16 <-> 22: 8\n16 <-> 29: 2\n17 <-> 18: 6\n17 <-> 24: 2\n17 <-> 28: 4\n17 <-> 29: 10\n18 <-> 21: 8\n18 <-> 22: 4\n18 <-> 23: 6\n18 <-> 26: 6\n19 <-> 20: 10\n19 <-> 22: 7\n19 <-> 23: 3\n19 <-> 27: 8\n19 <-> 30: 4\n20 <-> 21: 5\n20 <-> 22: 2\n20 <-> 23: 8\n20 <-> 25: 7\n20 <-> 26: 4\n20 <-> 30: 2\n21 <-> 22: 2\n21 <-> 24: 3\n21 <-> 26: 8\n22 <-> 25: 2\n22 <-> 29: 8\n22 <-> 30: 1\n23 <-> 24: 10\n23 <-> 25: 2\n23 <-> 30: 2\n24 <-> 30: 9\n25 <-> 26: 10\n25 <-> 29: 10\n26 <-> 27: 5\n26 <-> 29: 4\n26 <-> 30: 1\n27 <-> 28: 8\n27 <-> 30: 6\n28 <-> 30: 3\n\nlength of shortest path from 1 to 2 in this graph = 6 (1 <-> 14 <-> 2)\nlength of shortest path from 1 to 3 in this graph = 3 (1 <-> 9 <-> 28 <-> 3)\nlength of shortest path from 1 to 10 in this graph = 4 (1 <-> 9 <-> 4 <-> 10)\nlength of shortest path from 1 to 30 in this graph = ?'
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: false,
										_1: {
											ctor: '::',
											_0: true,
											_1: {
												ctor: '::',
												_0: true,
												_1: {
													ctor: '::',
													_0: false,
													_1: {ctor: '[]'}
												}
											}
										}
									},
									_1: 'a hidden 7 in a number is a set of consecutive digits in the number that form a multiple of 7\nnumber of hidden 7s in 7 = 1\nnumber of hidden 7s in 357 = 3\nnumber of hidden 7s in 733 = 1\nnumber of hidden 7s in 63750640677315350160 = 41\nnumber of hidden 7s in 306994111772424400362482646284077776273548255558616473829043 = ?'
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: {
											ctor: '::',
											_0: false,
											_1: {
												ctor: '::',
												_0: true,
												_1: {
													ctor: '::',
													_0: true,
													_1: {
														ctor: '::',
														_0: true,
														_1: {ctor: '[]'}
													}
												}
											}
										},
										_1: 'number of numbers that can be made using all of 1, 2, 3, 4, +, -, - = 4 (2, 4, 6, 8)\nnumber of numbers that can be made using all of 4, 1, 2, 4, 3, 10, 7, +, -, +, +, -, - = ?'
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: {
												ctor: '::',
												_0: true,
												_1: {
													ctor: '::',
													_0: false,
													_1: {
														ctor: '::',
														_0: false,
														_1: {
															ctor: '::',
															_0: false,
															_1: {ctor: '[]'}
														}
													}
												}
											},
											_1: 'A pair of matching braces (or a \"matching pair\" for short) is a pair of an open brace and a close brace where the close brace closes the open brace.\nNote that any brace can be part of only one pair of matching braces.\nIn {}, braces 1 and 2 (the only two braces) form a matching pair.\nIn {{}}, brace 3 closes brace 2, and brace 4 then closes brace 1 (since brace 2 is already closed), so braces 1 and 4 and braces 2 and 3 form matching pairs.\nIn {{}{}}, braces 1 and 6, braces 2 and 3, and braces 4 and 5 form matching pairs.\n\nf(x) = number of pairs of pairs of matching braces in x where one pair of matching braces is in the other pair of matching braces\nf({}) = 0\nf({{}}) = 1 (the outer pair (braces 1 and 4) and the inner pair (braces 2 and 3))\nf({{}{}}) = 2 (the outer pair and either inner pair)\nf({{{}}}) = 3 (outer and middle, outer and inner, and middle and inner)\nf({{{}}{}}) = 4\nf({{}{}{{{}{}}}{{}}}) = ?'
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: {
													ctor: '::',
													_0: true,
													_1: {
														ctor: '::',
														_0: false,
														_1: {
															ctor: '::',
															_0: false,
															_1: {
																ctor: '::',
																_0: true,
																_1: {ctor: '[]'}
															}
														}
													}
												},
												_1: 'A connected component of a graph is a subset of the vertices in a graph that are all connected (directely or indirectly) to all of the other vertices in the connected component and none outside of it.\n\n1 <-> 5\n3 <-> 8\n6 <-> 10\nThe size of the largest connected component of this graph (with vertices 1 through 10) = 2 (three-way tie)\n\n1 <-> 4\n1 <-> 14\n1 <-> 18\n2 <-> 14\n3 <-> 7\n3 <-> 10\n3 <-> 17\n4 <-> 15\n5 <-> 7\n5 <-> 10\n6 <-> 7\n8 <-> 15\n9 <-> 14\n10 <-> 19\n10 <-> 20\n12 <-> 15\n12 <-> 20\n13 <-> 14\n14 <-> 18\nThe size of the largest connected component of this graph (with vertices 1 through 20) = 18 (all but 11 and 16)\n\n1 <-> 19\n2 <-> 10\n2 <-> 26\n2 <-> 30\n4 <-> 29\n6 <-> 10\n7 <-> 24\n8 <-> 29\n10 <-> 12\n10 <-> 20\n10 <-> 29\n10 <-> 30\n11 <-> 19\n11 <-> 25\n12 <-> 23\n15 <-> 18\n15 <-> 19\n16 <-> 28\n18 <-> 24\n18 <-> 30\n28 <-> 29\nThe size of the largest connected component of this graph (with vertices 1 through 30) = ?'
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: {
														ctor: '::',
														_0: true,
														_1: {
															ctor: '::',
															_0: false,
															_1: {
																ctor: '::',
																_0: true,
																_1: {
																	ctor: '::',
																	_0: false,
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													_1: 'Here is an image of a few islands (~ representing ocean, other symbols representing other terrain):\n<pre>\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~##### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####       ~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~#~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~####       ~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~#####      ~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~#####      ~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~#####       ~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~#####       ~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######   ~~~~~~~~~####        ~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~~####        ~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~##### **      ~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~##### *****    ~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####    ~~######*******    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######   ####### *******    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####### ####### ********    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#############**********    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~############***********    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~########## ***********   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######************   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####************    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####************    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###*************     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###*************      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###************       ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###*************        ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###*************         #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###************           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###************           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##************            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##************           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###***********            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###*********              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###********               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###******                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####***                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####          ####       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####       ~~######     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~#####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###### ~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~#######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~#######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~##### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~##### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######  ~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####      ~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#### *     ~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####**     ~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####*      ~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####       ~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####       ~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</pre>\nperimeters of the islands in this image = 32, 44, 48, 70, 296\nlargest perimeter of an island in this image = 296 (unsurprisingly, it\'s the huge island sort of in the top-left)\n\n<pre>\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~##### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~####   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~####    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~####       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~####       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~####        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####**    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~####        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####***    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~####          ~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####***    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~####          ######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####***    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~####         #######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####***    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~####        ######  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####**     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~#####       ######   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~#####     #######    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~#################    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~######~~~~~#####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~####~~~~~~~#####    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##### ~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####  ~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####    ~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####    ~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####   ~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###### ~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</pre>\nlargest perimeter of an island in this image = ?'
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: {
															ctor: '::',
															_0: true,
															_1: {
																ctor: '::',
																_0: false,
																_1: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: true,
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														_1: '3^(3^(3^(3^3))) % 100 = ?'
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: {
																ctor: '::',
																_0: true,
																_1: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: false,
																		_1: {
																			ctor: '::',
																			_0: false,
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															_1: 'Here is an image of an island (~ representing ocean, space representing grassland, * representing mountains. and # representing other terrain):\n<pre>\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~#######~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~#### *     ~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~#### ***   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~####****   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~####*****   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~###******   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~####*****    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~###**a***   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~###*****    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~####*****   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~####****    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~####***    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~#####*      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~####       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~#b#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</pre>\nSome humans are traveling from location a to location b. They want to get from a to b as quickly as possible, due to the importance of finding the Jewel of Fortune located at b.\n\nHowever, being humans, they do not have command of either the art of navigating in woods (a skill mostly elves have), climbing mountains (a skill of the dwarves), or swimming/having gills (that would be merpeople).\n\nThus, although they only take 1 day to go through a grassland location, they take 2 to go through a forest location, and 3 to go through a mountain location. They cannot go through oceans at all.\n\nUnfortunately, this is a magic-free setting: there is no teleportation, and they can only go from a location to the one immediately below, above, to the left, or to the right.\n\nSmallest number of days in which they can get from a to b = 28. A route is shown below:\n<pre>\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~#######~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~#### *     ~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~#### ***   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~####****   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~####*****   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~###******   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~####*****    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~###**a***   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~###**|**    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~####**|**   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~####**|*    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~####**|    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~#####* |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~####   |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~####   |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~####+--+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~#####|  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~#b---+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</pre>\nThis route goes through 8 grassland locations, 4 mountain locations, and 4 forest locations, and thus takes 28 days.\n\nThe humans end up taking this route, but unfortunately, someone else took the Jewel of Fortune before they could steal... uh, \"buy\" it from the elves.\n\nNow, the humans have taken a boat to a new island, where they are in the hospitality of the elves at point a and attempting to get the Staff of Power, which is at point b. They have to leave soon, before news comes from the elves on the earlier island about what happened.\n\nHere is a map of the new island (together with a few others near it):\n<pre>\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~\n~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~\n~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###### ~~~~~~~~~~~\n~~~~~~~~~~~#####  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~\n~~~~~~~~~~#####   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~~~~~\n~~~~~~~~~~####    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####     ~~~~~~~~~~~\n~~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####     ~~~~~~~##~~\n~~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      ~~~~~####~~\n~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####  b   ~~~######~~\n~~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      #~########~~\n~~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####      ##########~~\n~~~~~~~#####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####      #########  ~~\n~~~~~~~####      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####     ########   ~~~\n~~~~~~~####     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####     #########   ~~~\n~~~~~~~#####   ~~~~~~~~~~#~~~~~~~~~~~~~~~~~~~#####    #~#######    ~~~\n~~~~~~~#####  ~~~~~~~~#####~~~~~~~~~~~~~~~~~#####    ~~~~######   ~~~~\n~~~~~~~######~~~~~~~~#######~~~~~~~~~~~~~~~#####    ~~~~~#####    ~~~~\n~~~~~~~####~~~~~~~~~######  ~~~~~~~~~~~~~~#####    ~~~~~######   ~~~~~\n~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~~~~~#####    ~~~~~~######   ~~~~~\n~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~~~~~~#####    ~~~~~~~######  ~~~~~~\n~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~~~~#####      ~~~~~~~#######~~~~~~~\n~~~~~~~~~~~~~~~~~~~####     ~~~~~~~~~####       ~~~~~~~~######~~~~~~~~\n~~~~~~~~~~~~~~~~~~~####     ~~~~~~~#####        ~~~~~~~~#####~~~~~~~~~\n~~~~~~~~~~~~~~~~~~#####      ~~~~##### ***      ~~~~~~~~####~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~#####      ~~##### ******    ~~~~~~~~~###~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~#####      ###### *******    ~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~#####      #### *********    ~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~######   ##### **********    ~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~############# ***********    ~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~########### ************    ~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~##########*************    ~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~#####*************     ~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~####**************      ##~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~####**************       ##~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~###***************        #~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~###**************          ~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~###**************          ~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~##****************         ~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~###****************         ~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~###****************        ~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~###******************      ~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~##********************     ~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~##*********************    ~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~###*********************    ~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~###*********************   ~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~###***********  *******    ~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~###********      ******    ~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~####******         *****   ~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~####****           ****    ~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~####                **    ~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~#####        ######        ~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~####      ~~~~######      ~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~#####    ~~~~~~~#####      ~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~#####   ~~~~~~~~~#####    ~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~###### ~~~~~~~~~~~~#######~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~\n~~~~~~~~~~~~~~~~#######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~\n~~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~\n~~~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~\n~~~~~~~~~~~~~~###### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~\n~~~~~~~~~~~~~~##### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#######~~~~~~~~~~~\n~~~~~~~~~~~~~###### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~\n~~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~######~~~~~~~~~~~~\n~~~~~~~~~~~~~#####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#####~~~~~~~~~~~~~\n~~~~~~~~~~~~######~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####~~~~~~~~~~~~~~\n~~~~~~~~~~~~##a##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</pre>\nSmallest number of days in which they can get from a to b = ?'
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: true,
																		_1: {
																			ctor: '::',
																			_0: false,
																			_1: {
																				ctor: '::',
																				_0: true,
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																},
																_1: 'A cycle is a set of vertices in a graph such that each connects to the next, and the last connects to the first.\n\nA tree is a connected graph without any cycles.\n\nA spannning tree of a graph is a subset of the edges in the graph which connect all the vertices of the graph and form a tree.\n\n1 <-> 2\n1 <-> 4\n1 <-> 7\n2 <-> 3\n2 <-> 8\n3 <-> 6\n3 <-> 10\n5 <-> 9\n6 <-> 7\n8 <-> 9\n8 <-> 10\nThe number of spanning trees of this graph = 19\n\n1 <-> 3\n1 <-> 9\n1 <-> 14\n2 <-> 3\n2 <-> 4\n2 <-> 5\n2 <-> 9\n2 <-> 12\n2 <-> 14\n3 <-> 9\n3 <-> 11\n4 <-> 6\n4 <-> 7\n4 <-> 8\n4 <-> 12\n4 <-> 13\n4 <-> 15\n6 <-> 8\n7 <-> 10\n7 <-> 11\n7 <-> 13\n7 <-> 15\n9 <-> 12\n9 <-> 15\n11 <-> 12\n11 <-> 15\nThe number of spanning trees of this graph = 108048\n\n1 <-> 5\n1 <-> 8\n1 <-> 10\n1 <-> 12\n1 <-> 14\n1 <-> 15\n1 <-> 17\n1 <-> 19\n2 <-> 17\n3 <-> 4\n3 <-> 11\n5 <-> 13\n5 <-> 14\n5 <-> 16\n6 <-> 16\n7 <-> 14\n7 <-> 17\n7 <-> 18\n7 <-> 20\n8 <-> 12\n8 <-> 13\n8 <-> 20\n9 <-> 16\n10 <-> 15\n10 <-> 17\n10 <-> 18\n11 <-> 13\n11 <-> 17\n12 <-> 19\n14 <-> 15\n14 <-> 17\n14 <-> 18\n15 <-> 16\n16 <-> 20\n17 <-> 18\n18 <-> 20\nThe number of spanning trees of this graph = ?'
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: {
																		ctor: '::',
																		_0: true,
																		_1: {
																			ctor: '::',
																			_0: true,
																			_1: {
																				ctor: '::',
																				_0: true,
																				_1: {
																					ctor: '::',
																					_0: false,
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	_1: 'The INnately Simple EnCryption Ultimately Resisting Enemies (INSECURE) committee has come up with a hash function, defined as follows:\n\nf(x), where x is an (unsigned) 32-bit number, considers x as 2 16-bit numbers y (which can be considered as four 4-bit numbers a, b, c, d) and z (which can be considered as four 4-bit numbers e, f, g, h).\n\nIt then swaps bits a and b (numbering bits in a big-endian way) of z, then bits c and d of z, then bits e and f of y, and then bits g and h of y.\n\nf(100000000) = 99967233\n\nh(x) (the actual hash function), where x is a 32-bit number, applies f to x 256 times. Here is how h(100000000) might be computed:\n\nIteration 0: 100000000\nIteration 1: 99967233\nIteration 2: 99968256\nIteration 3: 66445568\nIteration 4: 66416896\nIteration 5: 1123410176\n...\nIteration 256: 46123024\n\nSo h(100000000) is 46123024.\n\nThe lowest possible value for a + b such that a and b are both (unsigned) 32-bit numbers, a != b, and h(a) == h(b) = ?'
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: {
																			ctor: '::',
																			_0: true,
																			_1: {
																				ctor: '::',
																				_0: true,
																				_1: {
																					ctor: '::',
																					_0: true,
																					_1: {
																						ctor: '::',
																						_0: true,
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		_1: 'zero a\nzero b\nzero c\nzero d\nzero e\nzero f\ninc a\ninc a\ninc a\ninc a\ninc b\ninc b\ninc b\ninc c\n.a\n.b\ndec b\ninc d\njnz b .b\n.c\ndec d\ninc b\n.d\ndec c\ninc e\ninc e\ninc e\ninc f\njnz c .d\n.e\ndec f\ninc c\njnz f .e\njnz d .c\n.f\ndec e\ninc c\njnz e .f\ndec a\njnz a .a\n.g\n.h\ndec c\ninc f\njnz c .h\n.i\ndec f\ninc c\ninc a\njnz f .i\ndec c\njnz c .g\nout a\n\noutput = ?'
																	},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Data$questionName = _eeue56$elm_all_dict$EveryDict$fromList(
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: {
				ctor: '::',
				_0: false,
				_1: {
					ctor: '::',
					_0: false,
					_1: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: false,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			_1: 'A simple sum'
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: false,
					_1: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: false,
							_1: {
								ctor: '::',
								_0: true,
								_1: {ctor: '[]'}
							}
						}
					}
				},
				_1: 'Now in 4D'
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: false,
						_1: {
							ctor: '::',
							_0: false,
							_1: {
								ctor: '::',
								_0: true,
								_1: {
									ctor: '::',
									_0: false,
									_1: {ctor: '[]'}
								}
							}
						}
					},
					_1: 'The proper modularity'
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '::',
							_0: false,
							_1: {
								ctor: '::',
								_0: false,
								_1: {
									ctor: '::',
									_0: true,
									_1: {
										ctor: '::',
										_0: true,
										_1: {ctor: '[]'}
									}
								}
							}
						},
						_1: 'Multidimensional'
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: false,
								_1: {
									ctor: '::',
									_0: true,
									_1: {
										ctor: '::',
										_0: false,
										_1: {
											ctor: '::',
											_0: false,
											_1: {ctor: '[]'}
										}
									}
								}
							},
							_1: 'A bit wise'
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: {
									ctor: '::',
									_0: false,
									_1: {
										ctor: '::',
										_0: true,
										_1: {
											ctor: '::',
											_0: false,
											_1: {
												ctor: '::',
												_0: true,
												_1: {ctor: '[]'}
											}
										}
									}
								},
								_1: 'ASAP (As Short As Possible)'
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: false,
										_1: {
											ctor: '::',
											_0: true,
											_1: {
												ctor: '::',
												_0: true,
												_1: {
													ctor: '::',
													_0: false,
													_1: {ctor: '[]'}
												}
											}
										}
									},
									_1: 'Hidden 7'
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: {
											ctor: '::',
											_0: false,
											_1: {
												ctor: '::',
												_0: true,
												_1: {
													ctor: '::',
													_0: true,
													_1: {
														ctor: '::',
														_0: true,
														_1: {ctor: '[]'}
													}
												}
											}
										},
										_1: 'Just some simple arithmetic'
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: {
												ctor: '::',
												_0: true,
												_1: {
													ctor: '::',
													_0: false,
													_1: {
														ctor: '::',
														_0: false,
														_1: {
															ctor: '::',
															_0: false,
															_1: {ctor: '[]'}
														}
													}
												}
											},
											_1: 'Brace yourself'
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: {
													ctor: '::',
													_0: true,
													_1: {
														ctor: '::',
														_0: false,
														_1: {
															ctor: '::',
															_0: false,
															_1: {
																ctor: '::',
																_0: true,
																_1: {ctor: '[]'}
															}
														}
													}
												},
												_1: 'For the most part'
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: {
														ctor: '::',
														_0: true,
														_1: {
															ctor: '::',
															_0: false,
															_1: {
																ctor: '::',
																_0: true,
																_1: {
																	ctor: '::',
																	_0: false,
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													_1: 'Cartography 101'
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: {
															ctor: '::',
															_0: true,
															_1: {
																ctor: '::',
																_0: false,
																_1: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: true,
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														_1: 'The power of power'
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: {
																ctor: '::',
																_0: true,
																_1: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: false,
																		_1: {
																			ctor: '::',
																			_0: false,
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															_1: 'Shortest Path: The Return'
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: {
																	ctor: '::',
																	_0: true,
																	_1: {
																		ctor: '::',
																		_0: true,
																		_1: {
																			ctor: '::',
																			_0: false,
																			_1: {
																				ctor: '::',
																				_0: true,
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																},
																_1: 'Spanning trees'
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: {
																		ctor: '::',
																		_0: true,
																		_1: {
																			ctor: '::',
																			_0: true,
																			_1: {
																				ctor: '::',
																				_0: true,
																				_1: {
																					ctor: '::',
																					_0: false,
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	},
																	_1: 'r u a 1337 haxx|?'
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: {
																			ctor: '::',
																			_0: true,
																			_1: {
																				ctor: '::',
																				_0: true,
																				_1: {
																					ctor: '::',
																					_0: true,
																					_1: {
																						ctor: '::',
																						_0: true,
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		_1: 'Some assembly required'
																	},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
