var _user$project$Main$getQuestionTextHTML = function (q) {
	return _user$project$TextToHtml$textToHtml(
		A3(_user$project$Utils$getDefault, _user$project$Data$questionText, 'not written yet', q));
};
var _user$project$Main$hasSeen = F2(
	function (model, x) {
		return A2(_elm_lang$core$List$member, x, model.seen);
	});
var _user$project$Main$getAvailable = function (model) {
	return A2(
		_elm_lang$core$List$filter,
		function (x) {
			return (!A2(_user$project$Main$hasSeen, model, x)) && A2(
				_elm_lang$core$List$all,
				function (y) {
					return _elm_lang$core$Native_Utils.eq(y, x) || A2(_user$project$Main$hasSeen, model, y);
				},
				A2(
					_user$project$Utils$applyToEach,
					_elm_lang$core$Basics$always(false),
					x));
		},
		_user$project$Data$allQuestions);
};
var _user$project$Main$whatIsLeft = function (model) {
	var numLeft = _elm_lang$core$List$length(
		_user$project$Main$getAvailable(model));
	return _elm_lang$core$Native_Utils.eq(numLeft, 0) ? 'You\'ve solved everything!' : A2(
		_elm_lang$core$Basics_ops['++'],
		'You have ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(numLeft),
			A2(_elm_lang$core$Basics_ops['++'], ' available unsolved questions. ', ' Go back to the main page to see them.')));
};
var _user$project$Main$solvedElement = F2(
	function (model, q) {
		return A2(_user$project$Main$hasSeen, model, q) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Solved'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_user$project$Main$whatIsLeft(model)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		} : {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Unsolved'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Main$showAvailable = function (x) {
	return _elm_lang$html$Html$text(
		A3(_user$project$Utils$getDefault, _user$project$Data$questionName, 'not named yet', x));
};
var _user$project$Main$availableDefault = _elm_lang$html$Html$text('You\'ve solved everything!');
var _user$project$Main$solvedDefault = _elm_lang$html$Html$text('None yet.');
var _user$project$Main$getName = function (x) {
	return A3(_user$project$Utils$getDefault, _user$project$Data$questionName, 'not named yet', x);
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var newModel = function () {
			var _p0 = msg;
			switch (_p0.ctor) {
				case 'TryAnswer':
					var _p1 = _p0._0;
					return ((!A2(_user$project$Main$hasSeen, model, _p1)) && _elm_lang$core$Native_Utils.eq(
						_p0._1,
						A3(_user$project$Utils$getDefault, _user$project$Data$correctAnswers, '0', _p1))) ? _elm_lang$core$Native_Utils.update(
						model,
						{
							seen: {ctor: '::', _0: _p1, _1: model.seen}
						}) : model;
				case 'Goto':
					return _elm_lang$core$Native_Utils.update(
						model,
						{page: _p0._0});
				default:
					return _elm_lang$core$Native_Utils.update(
						model,
						{colorScheme: _p0._0});
			}
		}();
		return {
			ctor: '_Tuple2',
			_0: newModel,
			_1: _user$project$LocalStorage$setStorage(
				_user$project$Model$encode(newModel))
		};
	});
var _user$project$Main$initModel = {
	seen: {ctor: '[]'},
	page: _user$project$Model$MainPage,
	colorScheme: _user$project$ColorScheme$GreenOnBlack
};
var _user$project$Main$init = function (savedModel) {
	return {
		ctor: '_Tuple2',
		_0: A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$Main$initModel,
			A2(_elm_lang$core$Maybe$map, _user$project$Model$decode, savedModel)),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Main$SwitchColorScheme = function (a) {
	return {ctor: 'SwitchColorScheme', _0: a};
};
var _user$project$Main$switchColorSchemeHtml = function (cs) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					_user$project$Main$SwitchColorScheme(cs)),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Set style to ',
					_user$project$ColorScheme$toDisplayString(cs))),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$switchColorSchemeAllHtml = function (cs) {
	return A2(
		_elm_lang$core$List$map,
		_user$project$Main$switchColorSchemeHtml,
		A2(
			_elm_lang$core$List$filter,
			F2(
				function (x, y) {
					return !_elm_lang$core$Native_Utils.eq(x, y);
				})(cs),
			_user$project$ColorScheme$colorSchemes));
};
var _user$project$Main$Goto = function (a) {
	return {ctor: 'Goto', _0: a};
};
var _user$project$Main$linkTo = F2(
	function (p, s) {
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: 'blue'},
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$Main$Goto(p)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(s),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$showQuestionLink = function (x) {
	return A2(
		_user$project$Main$linkTo,
		_user$project$Model$Question(x),
		_user$project$Main$getName(x));
};
var _user$project$Main$questionLinks = F2(
	function (l, $default) {
		return function (x) {
			return A2(
				_user$project$Utils$listDefault,
				x,
				{
					ctor: '::',
					_0: $default,
					_1: {ctor: '[]'}
				});
		}(
			_user$project$Utils$intersperseBreaks(
				A2(
					_elm_lang$core$List$map,
					_user$project$Main$showQuestionLink,
					_user$project$Utils$sortBoolLists(l))));
	});
var _user$project$Main$solved = function (model) {
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h2,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Solved:'),
				_1: {ctor: '[]'}
			}),
		_1: A2(_user$project$Main$questionLinks, model.seen, _user$project$Main$solvedDefault)
	};
};
var _user$project$Main$available = function (model) {
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h2,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Available:'),
				_1: {ctor: '[]'}
			}),
		_1: A2(
			_user$project$Main$questionLinks,
			_user$project$Main$getAvailable(model),
			_user$project$Main$availableDefault)
	};
};
var _user$project$Main$backToMain = A2(_user$project$Main$linkTo, _user$project$Model$MainPage, 'Back to main page');
var _user$project$Main$TryAnswer = F2(
	function (a, b) {
		return {ctor: 'TryAnswer', _0: a, _1: b};
	});
var _user$project$Main$view = function (model) {
	var _p2 = model.page;
	if (_p2.ctor === 'MainPage') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A3(
						_elm_lang$html$Html$node,
						'style',
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _user$project$ColorScheme$toCssStyle(
								_user$project$ColorScheme$getStyle(model.colorScheme)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h1,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('= ?'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Main$solved(model),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Main$available(model),
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: _user$project$Main$switchColorSchemeAllHtml(model.colorScheme)
							}
						}))));
	} else {
		var _p3 = _p2._0;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A3(
						_elm_lang$html$Html$node,
						'style',
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _user$project$ColorScheme$toCssStyle(
								_user$project$ColorScheme$getStyle(model.colorScheme)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h1,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('= ?'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Main$backToMain,
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$h2,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_user$project$Main$getName(_p3)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_user$project$Main$solvedElement, model, _p3),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Main$getQuestionTextHTML(_p3),
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$placeholder('Answer?'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(
													_user$project$Main$TryAnswer(_p3)),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$br,
												{ctor: '[]'},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							_user$project$Main$switchColorSchemeAllHtml(model.colorScheme))))));
	}
};
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})(
	_elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Maybe$Just,
					A2(
						_elm_lang$core$Json_Decode$andThen,
						function (colorScheme) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (page) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (seen) {
											return _elm_lang$core$Json_Decode$succeed(
												{colorScheme: colorScheme, page: page, seen: seen});
										},
										A2(
											_elm_lang$core$Json_Decode$field,
											'seen',
											_elm_lang$core$Json_Decode$list(
												_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$bool))));
								},
								A2(
									_elm_lang$core$Json_Decode$field,
									'page',
									_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$bool)));
						},
						A2(_elm_lang$core$Json_Decode$field, 'colorScheme', _elm_lang$core$Json_Decode$string))),
				_1: {ctor: '[]'}
			}
		}));
